{"version":3,"sources":["logo.svg","serviceWorker.js","Showtime.js","Todolist/Todoing.js","Todolist/Todoinput.js","zijian/Request.js","Todolist/Todolist.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Component","Todoing","this","props","todo","map","item","index","key","onClick","e","delTodo","Todoinput","handleInput","keyCode","addTodo","state","val","handleChange","setState","target","name","parseInt","value","n1","n2","style","color","fontSize","htmlFor","id","onChange","onKeyDown","type","dangerouslySetInnerHTML","__html","Request","data","fetch","method","body","then","res","json","result","console","log","album_title","author","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,4KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCkBiBC,Y,WCjCFC,E,iLACP,IAAD,OACL,OACI,6BACI,wDACA,4BAEQC,KAAKC,MAAMC,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAc,wBAAIC,IAAKD,GAAQD,EAAjB,QAA2B,4BAAQG,QAAS,SAACC,GAAK,EAAKP,MAAMQ,QAAQJ,KAA1C,0B,GAPhDP,a,QCMhBY,E,YACjB,aAAc,IAAD,8BACT,+CAMJC,YAAc,SAACH,GACM,KAAdA,EAAEI,SACD,EAAKX,MAAMY,QAAQ,EAAKC,MAAMC,MATzB,EAYbC,aAAe,SAACR,GACZ,EAAKS,SAAL,eACKT,EAAEU,OAAOC,KAAOC,SAASZ,EAAEU,OAAOG,UAZvC,EAAKP,MAAQ,CACTQ,GAAI,EACJC,GAAI,GAJC,E,sEAiBH,IAAD,OACL,OACI,6BACI,2BAAOC,MAAO,CACVC,MAAMzB,KAAKc,MAAMQ,GAAGtB,KAAKc,MAAMS,GAAG,GAAG,MAAM,QAC3CG,SAAS,IAETC,QAAQ,OAJZ,sBAKA,2BAAOC,GAAG,MAAMT,KAAK,KAAKU,SAAU7B,KAAKgB,aAAcK,MAAOrB,KAAKc,MAAMQ,GAAIQ,UAAW,SAACtB,GAAD,OAAK,EAAKG,YAAYH,IAAIuB,KAAK,SAN3H,IAQI,2BAAOZ,KAAK,KAAKU,SAAU7B,KAAKgB,aAAcK,MAAOrB,KAAKc,MAAMS,GAAIO,UAAW,SAACtB,GAAD,OAAK,EAAKG,YAAYH,IAAIuB,KAAK,SAC9G,uBAAGC,wBAAyB,CAACC,OAAOjC,KAAKc,MAAMQ,GAAGtB,KAAKc,MAAMS,MAC7D,qD,GA9BuBzB,aCPlBoC,GCEiBpC,Y,kBDDlC,aAAc,IAAD,8BACT,+CACKgB,MAAM,CACPqB,KAAK,IAHA,E,iFAMM,IAAD,OAQdC,MAAM,sDAAsD,CAACC,OAAO,OAAOC,KAAK,eAAeC,MAAK,SAACC,GAE7F,OAAOA,EAAIC,UAChBF,MAAK,SAACC,GACL,EAAKvB,SAAS,CACVkB,KAAKK,EAAIE,SAEbC,QAAQC,IAAIJ,Q,+BAIhB,OACI,6BACI,wDACA,4BAEQxC,KAAKc,MAAMqB,KAAKhC,KAAI,SAACC,EAAKC,GAAN,OAChB,wBAAIC,IAAKD,GACL,4BAAKD,EAAKyC,aACV,2BAAIzC,EAAK0C,kB,GAlCJhD,cEqBrCiD,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SN0G7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.d334b064.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React,{Component,Fragment} from 'react';\r\n//函数定义组件 （无生命周期函数）\r\n//当只是渲染结构时候，没有逻辑\r\n// function Hello( props ) {  \r\n//      return <h1>Hello { props.name }</h1> \r\n//     } \r\n//       ReactDOM.render(  <Hello name=\"React\"/>, document.getElementById('root') );  \r\nfunction Todo(props){\r\n    return (\r\n        <div>\r\n           {/* 条件渲染 */}\r\n               {/* 1、三步运算符 */}\r\n            {props.list.length>=5?<h1>你好</h1>:''}    \r\n               {/* 2、 短路   */}\r\n            {/* {props.list.length>=5&&<h1>你好</h1>} */}\r\n          \r\n            <ul>\r\n                {/* 循环渲染 */}              \r\n                {/* {\r\n                    props.list.map(function(str,index){\r\n                        if(index%2===0){\r\n                            return <li key={str}>{str}</li>\r\n                        }\r\n                    \r\n                    })\r\n                } */}\r\n                { props.list.map(\r\n                        (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n//类定义组件\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            time:new Date().toLocaleString()\r\n        }\r\n        //绑定this\r\n        this.handleClick=this.handleClick.bind(this);\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n    }\r\n    shouldComponentUpdate(){\r\n        return true;\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('didUpdate');\r\n    }\r\n    handleClick=(i,e)=>{\r\n        console.log(this);\r\n        console.log('点击成功');\r\n    }\r\n    divClick(num,e){\r\n        console.log(num,e);\r\n    }\r\n    render(){\r\n        return (\r\n            //Fragment 是一个容器，不会出现在DOM树中\r\n            <Fragment>\r\n                {/* <div onClick={()=>{\r\n                    console.log(1);\r\n                }}>{this.state.time}</div> */}\r\n                <div onClick={(e)=>this.handleClick(1,e)}>{this.state.time}</div>\r\n                {/* <div onClick={this.handleClick}>{this.state.time}</div> */}\r\n                <div>{this.state.time}</div>\r\n                <div onClick={this.divClick.bind(this,2333)}>hello{this.props.word}</div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出，只能导出一个，导入和导出可以名字不一样\r\nexport default ShowTime;\r\n//命名导出,可以导出多个，导出和导入名字必须相同\r\n//export {ShowTime}\r\n//export {ABC}\r\n\r\n","import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行</h1>\r\n                <ul>\r\n                    {\r\n                        this.props.todo.map((item,index)=><li key={index}>{item}-----<button onClick={(e)=>{this.props.delTodo(index)}}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// Todoing.PropTypes={\r\n//     todo:PropTypes.array\r\n// }\r\n// Todoing.defaultProps={\r\n//     todo:[1,2,3],\r\n//     a:100\r\n// }","import React, { Component } from 'react'\r\n//子组件---->父组件传递数据，调用子组件时往子组件传递一个函数\r\n// 子组件通过props调用该函数\r\n\r\n//受控组件和非受控组件\r\n\r\n\r\n// 受控组件：value值被react的状态控制\r\n// 实时获取或处理输入的内容\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            n1: 0,\r\n            n2: 0\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(this.state.val);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: parseInt(e.target.value)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label style={{\r\n                    color:this.state.n1+this.state.n2>10?'red':'green',\r\n                    fontSize:50\r\n                    }} \r\n                    htmlFor=\"inp\">输入：</label>\r\n                <input id=\"inp\" name=\"n1\" onChange={this.handleChange} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                +\r\n                <input name=\"n2\" onChange={this.handleChange} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                <p dangerouslySetInnerHTML={{__html:this.state.n1+this.state.n2}}></p>\r\n                <button>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//\r\n\r\n\r\n// 非受控组件\r\n// 代码简单、比较适用于一次性获取表单的值\r\n// export default class Todoinput extends Component {\r\n//     componentDidMount(){\r\n//         console.log(this.inp.value);\r\n//         // console.log(this);\r\n//     }\r\n//     search = ()=>{\r\n//         console.log(this.inp.value);\r\n//     }\r\n//     render(){\r\n//         return (<div>\r\n//                     <input ref={inp=>this.inp = inp} type=\"text\"/>\r\n//                     <button onClick={this.search}>查询</button>\r\n//                 </div>)\r\n//     }\r\n// }","import React, { Component } from 'react'\r\nimport Aioxs from 'axios';\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            data:[]\r\n        }\r\n    }\r\n   componentDidMount(){\r\n        // Aioxs.get('https://api.apiopen.top/musicRankingsDetails?type=1').then((res)=>{\r\n        //     console.log(res);\r\n        //     this.setState({\r\n        //         data:res.data.result\r\n        //     })\r\n        // })\r\n\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1',{method:'post',body:'{name:111}'}).then((res)=>{\r\n                //console.log(res);  \r\n                return res.json();  \r\n        }).then((res)=>{\r\n            this.setState({\r\n                data:res.result\r\n            })\r\n            console.log(res);\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map((item,index)=>(\r\n                            <li key={index}>\r\n                                <h2>{item.album_title}</h2>\r\n                                <p>{item.author}</p>                                               \r\n                        </li>\r\n                       ))\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo: [1,2,3]\r\n        }\r\n\r\n        // 深拷贝\r\n        // var arr=[1,2,{a:100}];\r\n        // //var b=[...arr];\r\n        // var b=JSON.parse(JSON.stringify(arr));\r\n        // b[2].a=200;\r\n        // console.log(arr);\r\n\r\n\r\n        //对象的拷贝\r\n        var a={a:100};\r\n        var b={b:200};     //如果也是a，则后一个值覆盖前一个值\r\n        var o=Object.assign(a,b);   //加花括号生成一个新的对象（目标对象）\r\n        console.log(o);\r\n\r\n        // var a={a:100};\r\n        // var o=Object.assign({},a);\r\n        // console.log(o===a);\r\n        // console.log(o);\r\n\r\n        //Object.keys返回由属性名组成的一个数组\r\n        Object.keys(a).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(a[item]);\r\n        })\r\n\r\n        // for(var item in a){\r\n        //     console.log(a);\r\n        // }                        性能不好，尽量不用\r\n\r\n\r\n\r\n    }\r\n    addItem = (msg)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,msg]\r\n        })\r\n        console.log(msg);\r\n    }\r\n    delItem = (a)=>{\r\n        // this.state.todo.splice(a,1);\r\n        //深拷贝\\浅拷贝\r\n        //状态（state）：1、不要直接改变、处理状态\r\n       \r\n\r\n        // 浅拷贝\r\n        var todo=[...this.state.todo];\r\n        todo.splice(a,1);\r\n         // 2、setState是异步的\r\n         this.setState((state,props)=>({todo:state.todo+1}))\r\n        this.setState({todo})\r\n\r\n        \r\n        // this.setState({           \r\n        //     todo:todo\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing todo={this.state.todo}  delTodo={this.delItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ShowTime from './Showtime';\nimport Todolist from './Todolist/Todolist';\nimport Request from './zijian/Request'\n// jsx表达式会被react转成一个对象，类似于下边的obj\n// var ele=React.createElement('div',{'id':'box'},'hello', React.createElement(\n//         'h1',\n//         {'id':'h'},\n//         'react'\n//     )\n// );\n// React.createElement('h1',{'id':'h'},'react'));\n//\n\n//组件交互\n//父组件-->子组件：调用时在子组件上添加属性\n//在子组件中加入props获取数据\n\n //ReactDOM.render(<Todolist/>,document.getElementById('root'));\nReactDOM.render(<Request/>,document.getElementById('root'));\n\nvar obj={\n    type:'div',\n    props:{\n        id:'box',\n        class:'box',\n        children:['hello', \n        {\n            type:'h1',\n            props:{\n            id:'h',\n            class:'h',\n            children:['hi']\n            }\n        }\n        ]\n    }\n}\n\n\n// 加载HTML文件、浏览器解析HTML生成DOM树\n// link加载css文件、解析css规则、生成render tree（渲染树）、浏览器渲染引擎渲染render tree\n\n\n// 页面回流（重排）：内容改变、大小改变、结构改变\n// 页面重绘：把字体颜色、背景颜色等样式改变\n\n//node.offsetLeft、node.offsetWidth等慎用\n// var root=document.getElementById('root');\n// var width=root.offsetWidth;\n// setInterval(function(){\n//     width+=1;\n//     root.style.width=width+'px';\n// },100)\n\n// display、width、height、font-size等会引起页面回流\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// 声明一个css的一个类\n// .change{\n//     width: 100px;\n//     height: 100px;\n// }\n// document.body.className = 'change';\n\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n\nfunction render(obj,container){\n    var {type,props}=obj;\n    //文档碎片\n    var fragment=document.createDocumentFragment();\n    \n\n\n    var ele=document.createElement(obj.type);\n    for(var item in obj.props){\n        if(item==='class'){\n            ele.className=props[item];\n        }else if(item==='children'){\n            for(var i=0;i<props[item].length;i++){\n                if(typeof props[item][i]==='object'){\n                    render(props[item][i],ele);\n                }else{\n                var txt=document.createTextNode(props[item][i]);\n                ele.appendChild(txt);\n                }\n            }\n                \n        }else{\n            ele[item]=props[item];\n        }\n       \n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n\n\n// //react元素创建后不可变\n// function tick(){\n//     var e=<div>\n//         <p>当前时间</p>\n//         <h1>{new Date().toLocaleString()}</h1>;       \n//     </div>\n//      ReactDOM.render(e,document.getElementById('root'));\n// }\n// tick();\n// setInterval(tick,1000);\n// render(obj,document.getElementById('root'));\n\n\n\n \n \n \n\n\n\n//var item='hello';\nvar str=[1,2,3,4,5];\n//var str=[<li>1</li>,<li>2</li>,3,4,5];\n//ReactDOM.render(  <Todo list={str}/>, document.getElementById('root') );\n//ReactDOM.render(  <Todo list={item}/>, document.getElementById('root') );\n\n// var str='hello';\n// var ele=<h1>{str}</h1>;\n\n//ReactDOM.render(ele, document.getElementById('root'));\n\n\n\n\n// ReactDOM.render(<h1>你好</h1>,document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}