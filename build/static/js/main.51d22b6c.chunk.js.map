{"version":3,"sources":["serviceWorker.js","Todoing.js","TodoInput.js","TodoList.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Todoing","state","td","this","props","todo","length","className","map","item","index","key","id","type","onChange","e","addDid","onClick","delTodo","todone","pullDid","delDid","Component","Todoinput","handleInput","keyCode","addTodo","target","value","handleChange","setState","name","data","style","color","fontSize","htmlFor","onKeyDown","Finish","addItem","msg","localStorage","setItem","JSON","stringify","delItem","a","splice","ev","pullItem","pullItemed","parse","getItem","addCount","load","onload","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.51d22b6c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\r\n\r\nexport default class Todoing extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            td:[1,2]\r\n        }\r\n    }\r\n    render() {\r\n                return (\r\n                    <div>\r\n                         \r\n                        <h1>正在进行 {this.props.todo.length}</h1>\r\n                        \r\n                        <ul className=\"list\">\r\n                            {\r\n                                this.props.todo.map((item,index)=><p key={index}><input id='inp' \r\n                                type=\"checkbox\" onChange={(e)=>{this.props.addDid(item,index)}}/>\r\n                                {item}-------<button onClick={(e)=>{this.props.delTodo(index)}}>删除</button></p>)\r\n                            }\r\n                        </ul>\r\n                        \r\n                        <h1>已经完成 {this.props.todone.length}</h1>\r\n                        <ul>\r\n                            {\r\n                              this.props.todone.map((item,index)=><p key={index}><input id='inp' \r\n                              type=\"checkbox\" onChange={(e)=>{this.props.pullDid(item,index)}}/>\r\n                              {item}-------<button onClick={(e)=>{this.props.delDid(index)}}>删除</button></p>)\r\n                            }\r\n                        </ul>\r\n                       \r\n                     </div>\r\n\r\n                )\r\n            }\r\n    }\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n           data:'TodoList'\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label style={{\r\n                    color:'red',\r\n                    fontSize:20\r\n                    }} \r\n                    htmlFor=\"inp\">输入：</label>\r\n                <input id=\"inp\" name=\"n1\" onChange={this.handleChange} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Todoing from './Todoing';\r\nimport TodoInput from './TodoInput';\r\n\r\nexport default class Finish extends Component {\r\n    constructor(){\r\n        super();\r\n        // localStorage.setItem('todo',JSON.stringify(todo));\r\n        // todo= JSON.parse(localStorage.getItem('todo'));\r\n        this.state = {               \r\n            todo:JSON.parse(localStorage.getItem('todo')||'[]'),\r\n            todone: JSON.parse(localStorage.getItem('todone')||'[]')\r\n        }\r\n    }\r\n    addItem = (msg)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,msg]\r\n        },()=>{\r\n           localStorage.setItem('todo',JSON.stringify(this.state.todo));\r\n        })   \r\n    }\r\n    delItem = (a)=>{\r\n        var todo=[...this.state.todo];\r\n        todo.splice(a,1);\r\n        this.setState((state,props)=>({todo:state.todo+1}))\r\n        this.setState({todo},()=>{\r\n            localStorage.setItem('todo',JSON.stringify(this.state.todo));\r\n        })\r\n    }\r\n    delDid=(ev)=>{\r\n        var todone=[...this.state.todone];\r\n        todone.splice(ev,1);\r\n        this.setState((state,props)=>({todone:state.todone+1}))\r\n        this.setState({todone},()=>{\r\n            localStorage.setItem('todone',JSON.stringify(this.state.todone));\r\n        })\r\n    }\r\n    pullItem=(msg,a)=>{\r\n       var todo=[...this.state.todo];\r\n       var todone=this.state.todone;\r\n       todo.splice(a,1);\r\n       this.setState((state,props)=>({todo:state.todo+1}))\r\n       this.setState({\r\n            todo:todo,\r\n            todone:[...this.state.todone,msg]\r\n       },()=>{\r\n        localStorage.setItem('todo',JSON.stringify(this.state.todo));\r\n        localStorage.setItem('todone',JSON.stringify(this.state.todone));\r\n       })\r\n    }\r\n    pullItemed=(msg,a)=>{\r\n        var todo=[...this.state.todo];\r\n        var todone=this.state.todone;\r\n        todone.splice(a,1);\r\n        this.setState((state,props)=>({todone:state.todone+1}))\r\n        this.setState({\r\n             todone:todone,\r\n             todo:[...this.state.todo,msg]\r\n        },()=>{\r\n            localStorage.setItem('todo',JSON.stringify(this.state.todo));\r\n            localStorage.setItem('todone',JSON.stringify(this.state.todone));\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TodoInput addTodo={this.addItem}/>\r\n                <Todoing todo={this.state.todo} todone={this.state.todone} addCount={this.addCount} load={this.onload}\r\n                 delTodo={this.delItem}  addDid={this.pullItem} delDid={this.delDid} pullDid={this.pullItemed}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport TodoList from './TodoList';\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}